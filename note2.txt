11.21
高并发秒杀系统
写入内存而不是写入硬盘 
异步处理而不是同步处理 
分布式处理

jvm

数据结构
线性结构 能通过上一个节点找到下一个节点
数组 逻辑连续，物理连续
链表 逻辑连续，物理不连续
非线性结构
逻辑上和物理上都是非连续的

11.22
hashmap
Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。
Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。
LinkedHashMap：LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。
TreeMap：TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。

map.put("优知","IT进阶站");
系统将调用”优知”这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（高位运算和取模运算，下文有介绍）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。

1. 确定哈希桶数组索引位置
当链表长度太长（默认超过8）时,链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能
Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。
方法一：
static final int hash(Object key) { //jdk1.8 & jdk1.7
 int h;
 // h = key.hashCode() 为第一步 取hashCode值
 // h ^ (h >>> 16) 为第二步 高位参与运算
 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}
方法二：
static int indexFor(int h, int length) { //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的
 return h & (length-1); //第三步 取模运算
}
这里的Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。

它通过h & (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h& (length-1)运算等价于对length取模，也就是h%length，但是&比%具有更高的效率。

hashmap 线程不安全的主要原因
当map的容量不够时，会进行扩容
如果，有线程1，和线程2对同一个map操作，当线程1在执行到 数据重组前，链表中的元素顺序为A，B,即当前要操作的元素为A，next为B。
线程2的Map 已经重组，为B，A;就会导致循环链表的产生，导致数据阻塞，线程不安全。

当产生hash冲突时，每次重组或新增的元素，都在链表第一个。

红黑树

锁会消耗性能，锁的实现需要借助机器指令，运行时，会对不同的指令进行不同的操作。

数据结构 只是一种逻辑上的定义，不同的语言需要通过自身的语言来实现。
不同的数据结构，有不同的优势，在遇到实际情况时，要会选用。

11.23
吞吐量=运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)。
与GC相关的常用参数
除了上面提及的一些参数，下面补充一些和GC相关的常用参数：
 -Xmx: 设置堆内存的最大值。
 -Xms: 设置堆内存的初始值。
 -Xmn: 设置新生代的大小。
 -Xss: 设置栈的大小。
 -PretenureSizeThreshold: 直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配。
 -MaxTenuringThrehold: 晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就会加1，当超过这个参数值时就进入老年代。
 -UseAdaptiveSizePolicy: 在这种模式下，新生代的大小、eden 和 survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。在手工调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量 (GCTimeRatio) 和停顿时间 (MaxGCPauseMills)，让虚拟机自己完成调优工作。
 -SurvivorRattio: 新生代Eden区域与Survivor区域的容量比值，默认为8，代表Eden: Suvivor= 8: 1。
 -XX:ParallelGCThreads：设置用于垃圾回收的线程数。通常情况下可以和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的。
 -XX:MaxGCPauseMills：设置最大垃圾收集停顿时间。它的值是一个大于 0 的整数。收集器在工作时，会调整 Java 堆大小或者其他一些参数，尽可能地把停顿时间控制在 MaxGCPauseMills 以内。
 -XX:GCTimeRatio:设置吞吐量大小，它的值是一个 0-100 之间的整数。假设 GCTimeRatio 的值为 n，那么系统将花费不超过 1/(1+n) 的时间用于垃圾收集。

 简单地讲，一个Native Method就是一个java调用非java代码的接口。一个Native Method是这样一个java的方法：该方法的实现由非java语言实现，比如C。这个特征并非java所特有，很多其它的编程语言都有这一机制，比如在C＋＋中，你可以用extern "C"告知C＋＋编译器去调用一个C的函数。

11.26
如何阅读一本书
英语阅读
JVM
method

堆和方法区由于是线程共享的区域，所以是线程不安全的。
不同线程调用，会出现不同步的数据，注意加锁处理。
本地方法区，虚拟机栈，程序计数器由于是不共享的数据，所以是线程安全的。

HotSpot虚拟机在堆中创建对象的过程
遇到new关键字 的时候，在堆中根据内存是否规整，选择不同方法为对象分配内存。
内存规整，指针碰撞(指针在规整和不规整的临界点)法，分配内存时，只需将指针移动对象内存大小即可
不规整，空闲列表法(找到空闲的内存直接分配)

对象在内存中存储的布局可以分为三部分
对象头 1.存储对象自身运行时的数据，哈希码，GC分代年龄，线程锁，线程ID等 2.类型指针 对象指向它的元数据的指针
实例数据 对象存储的数据，即对象定义的各种字段
对齐填充 不一定需要，仅仅起着占位符的作用。对象的大小必须是8字节的整数倍。对象头正是8字节的整数倍(1或2),当实例数据没有对齐时
就需要对齐填充来补全。

句柄
关于java中的引用 我觉得在"think in java"这本书里面讲得很好 在那本书里 他们把引用叫做"句柄"(Handle)
java中就是用"句柄"来操纵对象的
在java中 任何东西都可以看作是对象 因此，我们可采用一种统一的语法，任何地方均可照搬不误。但要注意，尽管将一切都“看作”对象，但操纵的标识符实际是指向一个对象的“句柄”（Handle）。在其他Java参考书里，还可看到有的人将其称作一个“引用”，甚至一个“指针”。可将这一情形想象成用遥控板（句柄）操纵电视机（对象）。只要握住这个遥控板，就相当于掌握了与电视机连接的通道。但一旦需要“换频道”或者“关小声音”，我们实际操纵的是遥控板（句柄），再由遥控板自己操纵电视机（对象）。如果要在房间里四处走走，并想保持对电视机的控制，那么手上拿着的是遥控板，而非电视机。
此外，即使没有电视机，遥控板亦可独立存在。也就是说，只是由于拥有一个句柄，并不表示必须有一个对象同它连接。


虚拟机栈运行方法，访问对象时有两种方法
1.直接访问，堆中存储的是实例数据和对象类型的引用。
2.通过句柄访问，reference存储的是句柄的地址，句柄指向实例数据和实例类型数据

判断是否为死亡对象
1.引用计数器
2.可达性分析

垃圾清除算法
1.标记清除
2.复制算法
3.标记整理

垃圾收集器
1.serial收集器
2.PraNew收集器
3.Paralle收集器
4.serial old收集器
5.Parallel Old 收集器
6.CMS 收集器
7.G1收集器 garbage first

吞吐量 = 用户运行代码时间/用户运行代码时间+垃圾回收时间

摩拜单车同步信息
车锁内置电池、GPS、与联网模块，闲时定时发动位置信息到服务器，用时实时发送位置信息到服务器。流量可以跟运营商谈。
2，后轮内置发电机为内置电池充电，电池为GPS、锁车组件和联网模块供电。
3，可以远程锁车，不光后轮有锁，前叉也有锁，锁车后只能左转不能右转。//实践证明这条是瞎掰
4，如果车辆被盗，你要先用专用工具拆开破坏掉她的联网功能，但是一体化设计如果被拆开它会像服务器发送报警信息。
5，挡雨罩虽然没有全覆盖轮胎，但罩内有个小刷子可以刷掉轮胎上的雨水，整体车速也不会太快，所以雨水不会摔到骑手身上。

11.27
找到自己的作息时间点，首先肯定不能睡这么晚
重要的是阅读
1)如何阅读一本书
2)JVM 
3)看新闻，看杂志，看书，看任何东西都要有收获。
4)以后多参与评论，多写，发表自己的见解。不能在别人聊天的时候自己不知道说什么
至少要能学会问问题。这样也能引起话题。
5)每天明确目标，提高效率，不能啥也不敢就把时间荒废了
6)少看抖音头条。
7)每天阅读英语，记单词，练习口语。


对接OA
如何阅读一本书  主题：增加阅读 理解力

1.阅读越主动，效果越好。要求的越多，探索的越多，获得的就会越多。
作者像投球手，书像棒球，读者像接球手。

2.使用一定的技巧阅读，会更加有效率

3.这是一个凭借着头脑运作，除了玩味读物中的一些字句之外，不假任何外助，以一己之力来提升自我的过程。你的头脑会从粗浅的了解推进到深人的理解。而会产生这种结果的运作技巧，就是由许多不同活动所组合成的阅读的艺术。

4.比如阅读杂志，小说等你只是去获得咨询，并没有提升你的理解力；比如看玄幻小说，没有什么意义，运用阅读以增加资讯与洞察力

阅读一本你不了解的书，你想去了解的知识，作者表达的东西，能增进你的理解力，理解更多的事情。比如学习JVM，自己本来不了解，阅读后，能提升自己这方面的知识。
运用阅读增长理解力

5.阅读时思考，观察，记忆，想象



//        //设置head
        HttpHeaders requestHeaders = new HttpHeaders();
        requestHeaders.set("head", "password");
        requestHeaders.setContentType(MediaType.APPLICATION_JSON);
        requestHeaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
        //通过HttpEntity 设置参数 head
        HttpEntity<?> request = new HttpEntity(brandOaVO, requestHeaders);
		

11.28
1.阅读一本书
2.品牌OA对接

11.29

12.03
对接对接
复习一遍，接着看一章

12.4
1.附件[]取不到
2.地址配置
3.复习
4.调整

品牌
http://192.168.2.145:7001/product/brand/brandReceiveOaStatus
商品
http://192.168.2.145:7001/product/product/productReceiveOaStatus
供应商
http://192.168.2.145:7001/product/supplier/supplierReceiveOaStatus
采购下单
http://192.168.2.145:7001/purchase/purchase/purchaseReceiveOaStatus
预购单
http://192.168.2.145:7001/purchase/imprest/imprestReceiveOaStatus
付款单
http://192.168.2.145:7001/purchase/payment/paymentReceiveOaStatus

12.5
优化付款模块
1.微服务，业务根据属性分成不同的服务。
当查询涉及到不同服务的表的时候，不能用联合查询。
以后服务压力大的时候，需要分库分表。
原则上是不同服务不同数据库

paymentdisount
createuser

自己实践
搭建springboot springcloud maven私服 gitlab私服 jenkins linux mysql redis rabbitmq sso log kibana 搜索引擎 功能数据权限
 
12.6
疑难杂症
JVM

垃圾收集器
serial收集器
收集垃圾时，必须暂停其它工作线程
major gc 老年代
minor gc 新生代
full gc 新生代和老年代

12.7
类加载过程
加载 -- 验证 -- 准备 -- 解析 -- 初始化
类加载器
双亲委派模型
bootstrap classloader

extension classloader

application classloader

user classloader

除了顶层，每个加载器都有其父类

这里的复用不采用继承，而是使用代码覆盖
加载类时，先将类交给父类，只用其父类不能够加载时，
子类才尝试加载。

12.10
空想家
有想法
但是不行动

悲哀

服务注册中心、
配置中心
zuul路由
zipkin监控信息

启动服务时指定启动参数 服务配置中心的服务地址，通过该服务在git上获取配置信息。
服务配置信息中指定注册中心地址，将服务注册在服务注册中心上。

每个服务项目 加入swagger，配置接口信息。
通过访问路由，来访问其它swagger接口。
自己动手实现这一套 springcloud

类加载器

请求超时
10s

12.11
swagger
rabbitmq
log Kibana
linux


看书
动手自己集成

副业
自媒体？
家乡旅游业?
家乡电商？

12.12
用户 -- 权限 放到redis中
修改时，重新修改redis value 值

12.13
1。rbac
系统对用户进行权限判断的主要流程是，一个用户登陆到网站，网站利用UA对用户进行角色判断并将用户拥有的角色结果保存为SESSION，当用户进行操作时，网站将SESSION中的角色与PA进行比对然后对用户所拥有的角色进行权限判断。
RBAC

2.sso

3.idea git  切换远程分支 
git fetch 更新远程仓库
选择分支后
checked out as 本地分支即可。


版本
代码版本
mvn版本
数据库版本

log back gelf

4.消息
对于异步的可以用消息机制处理

先配置消息服务器
rabbitmq地址，用户名， 密码
配置queue exchange binging 等

配置消息发送者，利用Rabbitemplate sendandconver发送消息

配置RabbitListener 监听消息，并处理。

表单重复提交


12.15
json 转义 \“
路由器再接一个路由器还是同一局域网吗
不是了，每一个路由器下的主机是一些局域网。
1、可以这样简单的人为IP地址在同一网段的主机是位于同一局域网的，即IP地址的前三段相同，如192.168.1.X x取1-154任意正数值都是同局域网的。
2、二级路由下的设备的可以访问主路由的下的设备，而主路由无法访问到二级路由下的设备，除非做端口映射。
3、如果是路由器再接一个交换机则两个设备下的主机是位于同一局域网内。


12.17
rabbitmqctl

rabbitmqctl status

rabbitmq-service status

rabbitmq-service start

service rabbitmq-service start

log stash

elastics

nohup grunt server

top

ss -tnpl

netstat -ano
netstat - tunple
kill -9 22974

慢慢
redis
消息

设计缺陷
插入时间 没精确到毫秒，导致插入时间相同
select * from product order by create_time desc 时,会随机选一个。

时间精确到毫秒

alter table product 

12.18
go
sing
work API接口，自测
采购模块 自测
redis sso cloud
需求设计，数据库设计
JVM

npm run dev

cnpm install

npm run dev

Gunag.Li:LG%402018@192.168.1.156.10000/Middle/_git/Web.Admin


12.19
自定义注解枚举验证类

注解校验，类中包含list ，list中的对象中的校验不生效


@Valid BrandParam  只校验最外层对象
如果brandParam 中包含list对象
List<Product> 需要校验里面的product时，则需要再List上加valid校验
如果List不传的话，则不校验。


mysql
日期转化
date_format(create_time,'%y-%m-%d')
char_to_date();

12.20
采购新增，没有total_money
不能一成不变，we need to improve


12.21
兼职？
老司机
网约车
地摊
雷声大，雨点小
BUJO
消费降级

配置

周末 
录一首歌 gg


12.24
redis sso cloud

jwt（json web token

单系统登录解决方案的核心是cookie，cookie携带会话id在浏览器与服务器之间维护会话状态。但cookie是有限制的，这个限制就是cookie的域（通常对应网站的域名），浏览器发送http请求时会自动携带与该域匹配的cookie，而不是所有cookie


470 + 590

458 + 590 


12.25
圣诞节，也要开心满满哟。
一年就要过去，可能这一年啥也没收获
总是雷声大，雨点小，忘了自己的初心。
不努力，还安慰自己说普通是服。
有太多东西需要自己去争取。
定好目标，定好原则，每天努力，不断学习，每天都要有进步。
最重要的就是实践，想法要有，但一定要去做。

现在的项目有许多值得我学习的，空闲时间，自己学习。不要怕，都会的。
我觉得关键是记下来。方便以后查找


1.启动脚本
#!/bin/bash
jps | grep eureka
while [ $? -eq 0 ]           $?是shell变量,表示"最后一次执行命令"的退出状态.0为成功,非0为失败.
do
  kill `jps | grep eureka | awk '{print $1}'`   //awk是用来提取列的主要工具；{print $1}就是将某一行（一条记录）中以空格为分割符的第一个字段打印出来,awk '{print $0}' 指显示所有信息
  kill pid 关闭进程
  sleep 5  //休眠5秒钟
  jps | grep eureka
done
sleep 8
nohup java -jar /usr/project/ecmoho-eureka/target/ecmoho-eureka-1.0.0.jar > /usr/project/ecmoho-eureka/sysetm_log.log 2>&1 &
echo "Finished"

#！/bin/bash
jps | grep eureka

while [ $? -eq 0 ]
do
  kill `jps | grep eureka | awk '{print $1}'`
  sleep 5 
  jps | grep eureka
done
sleep 8
bohup java -jar /usr/project/ecmoho-eureka/target/ecmoho-eureka-1.0.0.jar > /usr/project/ecmoho-eureka/sysetm_log 2>&1 &
echo "Finished"


nohup
nohup 不挂断运行的命令，当终端关闭或CTRL+C的时候，程序依旧运行
java -jar 方式运行springboot项目
前台启动
java -jar XXX.jar

指定启动内存大小
java -Xms1024m -Xmx1024m -Xmn1024m -server -jar boot.jar

后台启动
java -jar xxx.jar &
区别:前台启动ctrl+c就会关闭程序,后台启动ctrl+c不会关闭程序
制定控制台的标准输出
java -jar xxx.jar > catalina.out  2>&1 & 
 
catalina.out将标准输出指向制定文件catalina.out
2>&1 输出所有的日志文件
& 后台启动


jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况

ps命令，这个命令主要是用来显示当前系统的进程情况，有哪些进程，及其 id。 jps 也是一样，它的作用是显示当前系统的java进程情况，及其id号。我们可以通过它来查看我们到底启动了几个java进程（因为每一个java程序都会独占一个java虚拟机实例），和他们的进程号（为下面几个程序做准备），并可通过opt来查看这些进程的详细启动参数。

比较常用的参数：

-q 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数

-m 输出传递给main 方法的参数，在嵌入式jvm上可能是null

-l 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名

-v 输出传递给JVM的参数

jps命令有个地方很不好，似乎只能显示当前用户的java进程，要显示其他用户的还是只能用unix/linux的ps命令。


1.金额新增和撤回操作

悲观锁
乐观锁
锁表

开启事务

no wait

for update 

不能牺牲性能，数据不能出错

12.26
1.caseSize
2.新增提交按钮，提交到谁
3.区分 初次新增和供应链审核
4.供应链审核是否需要采购历史价
5.填写需求量后，自动计算到货后预计库存可用天数，=（当前库存+需求量）/均销量；
6.采购需求单 需要加一个使用状态



in_stock_usable 在库可用月数

12.28
分库分表
解耦
并发性
事务
乐观锁，悲观锁
内部类
redis
rabbitmq
定时任务
技术的应用场景
JVM 
性能



悲观锁
锁表




要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。


12.29
1.供应商币种
2.OA调整
3.整体逻辑梳理

锁行
不影响查询

悲观锁sql实现
在获取锁后，不允许其他人对该行数据操作
保证数据的准确性
解耦
性能
分库分表
压力大时随时能拆分服务，拆分代码
使重构工作最小化


1.2
1.电话
2.需求

1.3
回家带什么？ 恒寿堂
1.供应商 O
2.oa u8 对接
3.xue 
4.抢票 ok


login方法：根据用户名密码查数据库返回一个user对象并生成一个token token为UUID生成 redis string类型放入key为token，value为对象设置redis过期时间返回一个token
getUserBytoken方法：根据token取出redis数据获取不到返回201 获取 到了需要重新设置redis的过期时间并返回user对象
Logincontroller:调用login方法接收到一个token使用cookie的set方法把token放入不要设置cookie的时间
拦截器：页面除登录外跳转全部拦截每次点击前先从cookie获取token
获取不到token就返回false如获取到了token那就调用getUserBytoken方法取 到User对象	如接收到201返回false如接收到User对象就使用request对象
setAttribute方法把User对象放入并返回true

免登陆
主要是登陆过后将信息存在redis中，自动生成一个token
并将token放到cookie中返回。
每次访问时，先从cookie中取token，再根据token从redis中取用户信息。
如果有，则免登陆，否则重新登录。

1.3
1问，上线系统如何对日志进行管理
2问，MQ的消息丢了怎么办？你是如何保证消息100%到达的
3问：如何快速定位出问题的代码，前提是代码是你的同事开发的
1.日志的问题
日志管理先是合理分级。代码里的日志输出级别有一定规范，一般线上系统要保证INFO之下级别理论上是关闭的。
其次就是输出的管理，该接入的接入，该写文件的写文件，该放生的放生，然后日志文件做时间或者业务分离，时间拆分也不一定是shell吧，配置一下就能行，最理想的是有专门的日志平台，那只要做好接入和配置就行。
接着是大文件日志的检查，可以配置拆分，同时监管是不是有大量异常或者低级别日志。
之后可以调整级别做一下压测，看有没有影响性能的日志输出，如果有的话看是不是必要的，特别是长文本的日志。
最后就是归档了，该move的move走，该删的就删。

2. mq问题
不需要保证的就不保证，生产消费业务四方约定好送达率，消息送达率要求特别高就改方案，比如加上检查机制和补偿机制，没有说可靠性，性能和一致性三高的简单方案，总得有个折中。
如果实际送达率低得不合理就跟踪丢失原因，看消息服务本身或者消费者重试机制消费异常处理网络稳定这些是不是有问题，目前主流的mq可靠性还是很高的，单纯mq导致的丢数据几率很低。

3. 快速定位问题
线上问题其实快速应对比快速定位更重要，全看平时的预案做得如何。还要看是什么问题，业务逻辑的问题看日志能排查大多数，通常也可以放线下复现。如果是无响应锁死啊之类的就要分析负载内存连接数之类的指标，冷门不易复现或者很久才出现的问题就得看实际场景了。
线下环境发现的问题好办得多，通常没有什么快速定位的急迫需要，慢慢查呗。

1.4
next week
oa u8 对接

1.7
日常鸡汤
？
学过的东西都忘了
拖延症

每个文件的属性由左边第一部分的10个字符（如上的“dr-xr-xr-x”）来确定。我们把十个字符拆开看：

10位字符表示：
0位：确定文件类型
1-3位：确定该文件的所有者对文件的权限 owner
4-6位：确定所有者的同组用户拥有该文件的权限 group
7-9位：确定其他用户拥有该文件的权限 others
第一个字符：代表这个文件的类型，是目录、文件，还是一个链接等等
[ d ] 目录
[ - ] 文件
[ l  ] 链接文档(link file)
[ b ] 可供储存的接口设备(可随机存取装置)
[ c ] 串行端口设备，例如键盘、鼠标(一次性读取装置)
接下来的字符：以三个一组分成三组，用 r、w、x 三个参数的组合表示，位置不会改变
[ r ] 代表可读(read)
[ w ] 代表可写(write)
[ x ] 代表可执行(execute)
[ - ] 没有权限

更改chmod 

各权限的分数对照表如下：

r:4
w:2
x:1
每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：

owner = rwx = 4+2+1 = 7
group = rwx = 4+2+1 = 7
others= --- = 0+0+0 = 0
chmod 777 .bashrc


去空格

1.9
what 

redis:
  database: 14
  host: 192.168.1.186
  password: Ecmoho2020
  port: 6379

mid_service.ecmoho.com

production-OA (OA生产环境 ):	http://mid_oa.ecmoho.com
production-Synlogin(单点登录生产环境) :  http://mid_login.ecmoho.com
production-UCenter(UCenter生产环境) ：http://192.168.1.194:8080

供应商
角色
Linux


用户进行权限操作的流程：
　　1、    对访问客户端进行登陆判断，判断是否登陆成功，如果不成功则提示用户没有登陆。

　　2、    用户成功登陆后，系统将匹配成功的用户ID从USER表中取出，并与UA表对应的UID进行比对，罗列出符合条件的所有rid并将其作为一个SESSION保存。

　　3、    当用户进行特定权限操作时，系统用户提交的pid与数据库中的与数据库中的rid进行匹配，然后再判断用户SESSION中是否有匹配的值，如果有则赋予用户相应的权限，并提示操作成功，否则提示用户没有权限。

一种用户登录后,不可能是每次请求都查询一次数据库.
这样效率太低。放到session /redis zhogn 
token的存储一般选择使用redis，一是性能比较好，二是自动过期的机制，符合token的特性。
递归分组

权限多级菜单

4. 字符串截取：substring_index(str,delim,count)

为了验证是否实现了单点登录，我们可以复制我们的项目，使用postman在第一个项目中拿到token，发现这个token在第二个项目中也可以使用，也就证明了我们的项目可以实现单点登录功能，在实际开发中，我们只需要在一个项目中去颁发token，而其他的项目中去按照相同的规则去解析这个token，这样就可以实现单点登录，需要注意的就是在解析token时的签名密码要一致或者对应。





1.11
数据初始化
供应商
合作单位数据没有
国家美元欧元数据
结算账期

品牌
50620a9cd2aa11e89a670862664c73a4


付款账期
1.16
目标
自己搭建


1.23
List<Map> typeList = JSON.parseArray(purchaseVO.getPurchaseUse(), Map.class);

1.24
带分配金额

汇率 ，历史最低价
采购申请不需要

暂存提交初审后
获取列表时，没有币种，显示默认币种
没有汇率显示最新汇率            汇率只有在提交OA后才保存
没有采购价显示商品的默认成本价

OA审核成功
保存汇率，以后只能显示，不能修改，此时 合计人民币 历史最低价都以该汇率显示

审核失败
失败，将之前提交OA的汇率清除，修改时从新获取

优化
sort

1.28
简洁，前台传参和返回只暴露需要的。

1.29
优化sort
现金报表汇率
结算账期

loadrunner 压力并发测试

Java8 Lamada 表达式 list sort sum
1.
paymentDetailParams.sort(Comparator.comparing(PaymentParam.PaymentDetailParam::getApplyMoney)); 正序
paymentDetailParams.sort(Comparator.comparing(PaymentParam.PaymentDetailParam::getApplyMoney).reversed()) 逆序
2.
List<PurchaseSalesVO> sort = allPurchaseSalesVOS.stream().sorted((a,b) -> (int) (b.getDemand() - a.getDemand())).collect(Collectors.toList());
Double sum = allPurchaseSalesVOS.stream().mapToDouble(t -> t.getDemand()).sum();
3.
Collections.sort(queryPurchaseVOS, (o1, o2) -> {
                if (o1.getCreateTime().getTime() > o2.getCreateTime().getTime()) {
                    return -1;
                }
                if (o1.getCreateTime().getTime() == o2.getCreateTime().getTime()) {
                    return 0;
                }
                return 1;
});

        Map<Integer, List<TestStreamModel>> map = list.stream().collect(Collectors.groupingBy(t -> t.getGrade()));
        System.out.println("按年级分组"+map);
        /*然后再对map处理，这样就方便取出自己要的数据*/
        for(Map.Entry<Integer, List<TestStreamModel>> entry : map.entrySet()){
            System.out.println("key:"+entry.getKey());
            System.out.println("value:"+entry.getValue());
        }
 
        /*多重分组，先按年级分组，再按班级分组*/
        Map<Integer/*年级id*/, Map<Integer/*班级id*/, List<TestStreamModel>>> groupMap = list.stream().collect(Collectors.groupingBy(t -> t.getGrade(), Collectors.groupingBy(t -> t.getClasses())));
        System.out.println("按照年级再按班级分组："+groupMap);
        System.out.println("取出一年级一班的list："+groupMap.get(1).get(1));
 
        /*多重分组，一般多重分组后都是为了统计，比如说统计每个年级，每个班的总分数*/
        Map<Integer/*年级id*/, Map<Integer/*班级id*/, Double>> sumMap = list.stream().collect(Collectors.groupingBy(t -> t.getGrade(), Collectors.groupingBy(t -> t.getClasses(), Collectors.summingDouble(t -> t.getScore()))));
        System.out.println(sumMap);
        System.out.println("取出一年级一班的总分："+sumMap.get(1).get(1));
 
        /*stream是链式的，这些功能是可以一起使用的，例如：计算每个年级每个班的及格人数*/
        Map<Integer/*年级*/, Map<Integer/*班级*/, Long/*人数*/>> integerMap = list.stream().filter(t -> t.getScore() >= 60).collect(Collectors.groupingBy(t -> t.getGrade(), Collectors.groupingBy(t -> t.getClasses(), Collectors.counting())));
        System.out.println("取出一年级一班及格人数："+integerMap.get(1).get(1));

1.30
采购
报表
撤销 修改
当扣减金额大于银行余额时不允许操作。
采购修改校验 审核中，审核通过无法修改

mysql行级锁

事务影响性能

4.26
需求613 采购下单同步更新商品价格


        //上月第一天
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.MONTH, -1);
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        String lastMonthBegin = DateUtils.date2String(calendar.getTime());
        //上月最后一天
        Calendar cal = Calendar.getInstance();
        cal.set(cal.DAY_OF_MONTH, 1);
        cal.add(cal.DATE, -1);

 //如果修改了价格货种，则修改套装的价格
            if ((updateProduct.getPrice() != originalProduct.getPrice()) || (updateProduct.getCurrency().equals(originalProduct.getCurrency()))) {
                // 更新套装价格
                productGroupService.synProductGroupPrice(updateProduct.getId());
            }



5.5
https://blog.csdn.net/csdnnews/article/details/89702195
what
learn
plan

product 677
purchase 677

5.6
work
learn
dove
plan
do it 

记住我的基本原理
rememberme

 在Terminal 或者git控制条 执行 回退到某个版本命令

git reset --hard 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96 











































































































	