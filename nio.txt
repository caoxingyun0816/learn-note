Java NIO和IO的主要区别
IO                NIO
面向流            面向缓冲
阻塞IO            非阻塞IO
无                选择器
面向流与面向缓冲
Java NIO和IO之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。 Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。

阻塞与非阻塞IO
Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。

选择器（Selectors）
Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。

1.tomcat NIO配置
将Service.xml文件下的内容

<Connector port="8080" protocol="HTTP/1.1"  

connectionTimeout="20000"  

redirectPort="8443" /> 

改为

<Connector port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol"  

connectionTimeout="20000"  

redirectPort="8443" />

那么在启动tomcat时可以查看到tomcat已经以nio方式启动
同时为了获得更好的并发性还可以配置线程池

<Connector executor="tomcatThreadPool"

               port="8080" protocol="HTTP/1.1"

               connectionTimeout="20000"

               redirectPort="8443" />

<Connector port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol"

               maxThreads="150" SSLEnabled="true" scheme="https" secure="true"

               clientAuth="false" sslProtocol="TLS" />
			   
2.Tomcat Connector(Tomcat连接器)有bio、nio、apr三种运行模式
bio

bio（blocking I/O，阻塞式I/O操作），表示Tomcat使用的是传统的Java I/O操作(即java.io包及其子包)。 

默认的模式，性能最差，没有经过任何优化处理和支持。

nio

nio(non-blocking I/O)，Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API。拥有比传统I/O操作(bio)更好的并发运行性能。 

apr

apr(Apache Portable Runtime/Apache可移植运行时库)，Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高Tomcat对静态文件的处理性能。从操作系统级别来解决异步的IO问题,大幅度的提高性能。 Tomcat apr也是在Tomcat上运行高并发应用的首选模式。


在linux系统启动springboot项目

nohup java -jar XXX.jar
nohup 不挂断运行的命令，当终端关闭或CTRL+C的时候，程序依旧运行

springboot的三种启动方式
一：IDE 运行Application这个类的main方法

二：在springboot的应用的根目录下运行mvn spring-boot:run
mvn spring-boot:run


三：使用mvn install 生成jar后运行
先到项目根目录
mvn install
cd target
java -jar   xxxx.jar

区别:前台启动ctrl+c就会关闭程序,后台启动ctrl+c不会关闭程序

前台启动
java -jar XXX.jar
 

指定启动内存大小

java -Xms1024m -Xmx1024m -Xmn1024m -server -jar boot.jar

 

后台启动
java -jar xxx.jar &
 

区别:前台启动ctrl+c就会关闭程序,后台启动ctrl+c不会关闭程序

制定控制台的标准输出
java -jar xxx.jar > catalina.out  2>&1 & 
 

catalina.out将标准输出指向制定文件catalina.out
2>&1 输出所有的日志文件
& 后台启动