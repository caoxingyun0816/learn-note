学习记录
9.28
接口，抽象类
实现，继承
对于公用的属性，服务，查询，都可以提供
使用基类，其他类注意继承。
泛型的使用

sql连接与效率
左连接和内连接的效率问题
join 用连接右侧的表 过滤条件 速度快一点


三级查询

9.29
1.UUID 是 通用唯一识别码

其目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题。

6e208c52-c38b-11e8-8192-7ce9d3ea1f78

Java生成
package com.mytest;

import java.util.UUID;
 
public class UTest {
	public static void main(String[] args) {
	UUID uuid = UUID.randomUUID();    
	System.out.println(uuid);
    }
}

MySQL 中使用UUID

select Replace(UUID(),'-','');


select uuid();


2.lombok
idea中lombok 的 @data不起作用 
加入Lombok plugins 插件即可



3.@RequestParam
在SpringMvc后台进行获取数据，一般是两种。 
	1.request.getParameter(“参数名”) 
	2.用@RequestParam注解获取
参数名字不一致
参数名字不一致的话，需要在@RequestParam后面指定参数名字，才能为后面的参数进行赋值。
设置默认值
@RequestParam(name="lid",defaultValue="ste"
required=true，则参数必须要传

4.feign 不用被实现
直接通过feign 调用 controller

5.left right join

select a.* from tab a left join tab b  on a.id = b.id and a.id = 1 where b.id = 1;

关于 “A LEFT JOIN B ON 条件表达式” 的一点提醒
ON 条件（“A LEFT JOIN B ON 条件表达式”中的ON）用来决定如何从 B 表中检索数据行。
如果 B 表中没有任何一行数据匹配 ON 的条件,将会额外生成一行所有列为 NULL 的数据
在匹配阶段 WHERE 子句的条件都不会被使用。
仅在匹配阶段完成以后，WHERE 子句条件才会被使用。它将从匹配阶段产生的数据中检索过滤。

对于同一个表，在更新同一个表中的所有ID时，由于没有过滤条件，
可以选择使用内联，a join b on a.id = b.id
update a.id join (select uuid() as uuid ,id from b) b on a.id = b.id set a.id = b.uuid;

id  parent_id 三级结构
没有明确的类型
只通过parent_ID关联
可以使用连接

内连接匹配符合条件的记录
左连接 左表全表匹配
右连接 右表全表匹配

6.dozer-javabean映射工具详解
 dozer是一种JavaBean的映射工具，类似于Apache的BeanUtils。它可以灵活地处理复杂类型之间的映射。不但可以进行简单的属性映射、复杂的类型映射、双向映射、递归映射等，并且可以通过XML配置文件进行灵活的配置。
 
 Dozer转换，一个强大的对象属性转换器，能够快速的在实体bean，vo，do之间转换，在项目中集成Dozer，能够让提升我们的开发速率


两个类属性名不同的转换
 简单映射使用注解
public class SourceBean {

    private Long id;

    private String name;

    @Mapping("binaryData")
    private String data;

    @Mapping("pk")
    public Long getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }
} 
public class TargetBean {

    private String pk;

    private String name;

    private String binaryData;

    public void setPk(String pk) {
        this.pk = pk;
    }

    public void setName(String name) {
        this.name = name;
    }
}       

复杂的可以使用xml配置或API
配置映射配置文件

<mapping>标签中允许定义<class-a>和<class-b>，对应着相互映射的类。<field>标签里定义要映射的特殊属性。需要注意<a>和<class-a>对应，<b>和<class-b>对应。
<?xml version="1.0" encoding="UTF-8"?><mappings xmlns="http://dozer.sourceforge.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://dozer.sourceforge.net          http://dozer.sourceforge.net/schema/beanmapping.xsd">  <mapping date-format="yyyy-MM-dd">    <class-a>org.jie.spring.common.dozer.vo.NotSameAttributeA</class-a>    <class-b>org.jie.spring.common.dozer.vo.NotSameAttributeB</class-b>    <field>      <a>name</a>      <b>value</b>    </field>  </mapping></mappings>与Spring整合

7.泛型的使用
主要用来定义参数的类型的。对于参数类型不确定，可以用泛型指定
List<String>
对于不明确具体的类型，一个类型可以多个共用
可以使用泛型
List<T>

指定的类型一般都是类的属性。

10.8
先说一下相同点，二者都是基于web的Git仓库，在很大程度上GitLab是仿照GitHub来做的，它们都提供了分享开源项目的平台，为开发团队提供了存储、分享、发布和合作开发项目的中心化云存储的场所。

GitHub作为开源代码库及版本控制系统，拥有超过900万的开发者用户，目前仍然是最火的开源项目托管系统。GitHub同时提供公共仓库和私有仓库，但如果要使用私有仓库，是需要付费的。

而GitLab解决了这个问题，你可以在上面创建私人的免费仓库。

GitLab让开发团队对他们的代码仓库拥有更多的控制，相比于GitHub，它有不少的特色：

允许免费设置仓库权限；允许用户选择分享一个project的部分代码；允许用户设置project的获取权限，进一步的提升安全性；可以设置获取到团队整体的改进进度；通过innersourcing让不在权限范围内的人访问不到该资源。

从代码私有性方面来看，有时公司并不希望员工获取到全部的代码，这个时候GitLab无疑是更好的选择。但对于开源项目而言，GitHub依然是代码托管的首选。

个人觉得gitLab用的顺手一些，可能是用的多一点的关系吧！

ganjuemeiwoshenmeshi
haoganga
zijirongru
zijixue
buranshiguanni
xuyaoliaojieyewu
ranhouzijishejibiao

本地开发测试完毕后提交到mater分支
对应的项目发布到私服上
gitlab合并到test分支
然后Jenkins构造项目
swagger上查看接口信息
前后端分离

10.9
1.项目引入自己的jar包。例如A引入B，则B需要install到本地仓库。
A在本地仓库中引入B。
没有将B发布到本地，为什么没有在私服中下载？
像B这种供别人引用的项目，修改后还需要deploy发布到私服.mvn clean deploy

将生成的项目部署到远程仓库(例如项目B)
引入了一个元素：<distributionManagement>
distributionManagement包含了2个子元素：repository和snapshotRepository, 前者表示发布版本构件的仓库，后者表示快照版本的仓库
这两个元素都需要配置 id(该远程仓库的唯一标识)，name，url(表示该仓库的地址)
向远程仓库中部署构件，需要进行认证
egg
    <!--私服配置-->
    <distributionManagement>
        <repository>
            <id>release</id>
            <url>http://192.168.1.144:8081/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>snapshot</id>
            <url>http://192.168.1.144:8081/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

	配置正确后运行： mvn clean deploy 发布到私服

2.maven 依赖传递
A依赖B，B依赖C
则A依赖C

3.FeignClient 中如果传参，必须加入对应的注解
egg ResponseVO<Boolean> isExisted(@RequestParam("name") String name);

@RequestMapping(value = "getList", method = {RequestMethod.POST})
ResponseVO<List<Channel>> getList(@RequestBody Channel queryParam);
	
10.10
消息总线

gelf插件


zipkin服务mq配置

ribbon:
  ReadTimeout: 15000
  ConnectTimeout: 15000
  ReadTimeout: 10000
  ConnectTimeout: 3000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1


  

环形队列是一个实现“延时消息”的好方法，开源的MQ好像都不支持延迟消息，不妨自己实现一个简易的“延时消息队列”，能解决很多业务问题，并减少很多低效扫库的cron任务。

10.11

1.FEIGN是不用被实现的。
声明FEIGNClient 然后直接用controller实现feign，是可以带来@requestMapping的注解信息的。但是一般不推荐这么做。 
Spring Mvc 在注入Controller的bean时通过反射获取了其实现的接口的注解信息，并作为urlMapping进行了映射。
	
可以将服务的对外类进行一个模块的拆分，比如很多服务都需要用的FeignClient、model、dto、常量信息等，这些信息单独打Jar，其他服务需要使用，引用下即可。
url映射不一定要写在Contreller类的方法上，也可以写在它实现的接口里面。一般不推荐这么做。
因为注解是不能被继承的。这样做，只用对应的效果，没用实际实际的注解。

@FeignClient(value = "general-service",path = "general/country")
public interface CountryFeign {
    /***
     * 根据Id查询国家信息
     * @param id
     * @return
     */
    @RequestMapping(value = "getById",method = {RequestMethod.GET})
    ResponseVO<Country> getById(@RequestParam("id") String id);

}

@RestController
@RequestMapping("general/country")
public class CountryController implements CountryFeign{

    @Autowired
    private CountryService countryService;

    @ApiOperation(value = "根据ID查询国家信息", httpMethod = "GET")
    //@RequestMapping(value = "getById", method = {RequestMethod.GET}) 可以不用写，直接用feign里的requestmapping，能达到同样的效果。
    public ResponseVO<Country> getById(String id) {
        return countryService.getById(id);
    }
}
	
2.docker
Docker里比较重要的概念有注册服务器、仓库、镜像、容器。
仓库： 注册服务器是存放仓库的地方，其上往往存放着多个仓库。每个仓库集中存放某一类镜像，往往包括多个镜像文件，通过不同的标签（tag）来进行区分。例如存放Ubuntu操作系统镜像的仓库，称为Ubuntu仓库，其中可能包括14.04、12.04等不同版本的镜像。
镜像： Docker镜像（Image）类似于虚拟机镜像，可以将它理解为一个面向Docker引擎的只读模板，包含了文件系统。例如：一个镜像可以只包含一个完整的Ubuntu操作系统环境，可以把它称为一个Ubuntu镜像。
容器： 容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器都是相互隔离、互不可见的。可以从一个镜像创建无数个容器。平时我们主要操作的就是容器。我们也可以把容器打包成镜像以方便再次使用。镜像自身是只读的。容器从镜像启动的时候，Docker会在镜像的最上层创建一个可写层，镜像本身将保持不变。

docker pull的格式是：

docker pull[选项] [Docker Registry地址]  <仓库名>:<标签名>

docker pull ubuntn:14.04

看看下载的images

docker images

3. 在docker host上面运行Ubuntu 14.04于containers
我们现在运行Ubuntu14.04中的bash shell，因为docker运行image于容器时，需要指定主进程（本例的主进程为bash）。
在终端1上面运行docker run -it --rm ubuntu:14.04 bash
在终端2上面运行docker run -it --rm ubuntu:14.04 bash

这样我们就运行了ubuntu14.04这个image的2次实例（得到2个容器）, Linux下面的ps命令是看进程的，docker下面就是看image的实例容器了。

docker ps


4. 遇到问题到处喊救命

限制了你思维的深度，很难培养深入探索一个知识领域的思维习惯；

与当前工作职业无关的知识一概不理会

限制了你思维的广度，无法形成完备的知识体系支撑；

日复一日地低水平重复做一件细小的工作

耗费了您的青春，同时限制了深度和广度，成功地让您成为生锈的螺丝钉

5.mariaDB
MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。

使用json

MariaDB虽然被视为MySQL数据库的替代品，但它在扩展功能、存储引擎以及一些新的功能改进方面都强过MySQL。而且从MySQL迁移到MariaDB也是非常简单的：
1、数据和表定义文件（.frm）是二进制兼容的
2、所有客户端API、协议和结构都是完全一致的
3、所有文件名、二进制、路径、端口等都是一致的
4、所有的MySQL连接器，比如PHP、Perl、Python、Java、.NET、MyODBC、Ruby以及MySQL C connector等在MariaDB中都保持不变
5、mysql-client包在MariaDB服务器中也能够正常运行
6、共享的客户端库与MySQL也是二进制兼容的
也就是说，在大多数情况下，你完全可以卸载MySQL然后安装MariaDB，然后就可以像之前一样正常的运行。

试一试

columntype typehander
    @ColumnType()
	
10.12
1.mysql date-format

date-format(now Date(),'%Y-%m');


2.Collection.sort()
compareTO(Object o1,Object o1)
返回值	含义  
-1	 位置排在前
0	 位置不变
1	 位置排在后


函数理解：

public int compare(Object o1, Object o2) 返回一个基本类型的整型

如果要按照升序排序：

则01大于02返回1（正数），o1 小于o2，返回-1（负数），相等返回0；

如果要按照降序排序：

 则01大于02返回-1（负数），o1 小于o2，返回1（正数），相等返回0；

//逆序
 Collections.sort(historicalPricesVO, new Comparator<HistoricalPricesVO>() {
            @Override
            public int compare(HistoricalPricesVO o1, HistoricalPricesVO o2) {
                if(o1.getPrice() > o2.getPrice()){
                    return -1;
                }

                if(o1.getPrice() == o2.getPrice()){
                    return 0;
                }
                return 1;
            }


3.二维码
扫面二维码自动跳转
推荐使用QRCode类库做，网上也有不少资料，把网址生成二维码后扫描就能自动跳转，不过网址必须加“http://”(不加不能跳转)

4.短信验证码
手机注册验证逻辑是这样的：
首先要找短信服务商如：梦网、云信使、互亿无线等等申请短信发送接口。
网站实现流程如下：
第一步：用户注册时输入手机号，网站首先要通过JS或者ajax+php验证这个号码是不是正确的手机号。
第二步：用户点击发送手机验证码，通过ajax把手机号传到php，这时php生成一个随机的验证码保存在session中，然后通过短信接口把这个验证码发送到这个手机号中。
第三步：用户输入手机收到的验证码注册。网站用session中的验证码和用户输入的验证码比较。

5.需求分析
采购单 关联了商品，供应商 共用了一些属性的时候。
对于 商品需要实时更新的属性，可以直接存储对应表的ID
对于不需要实时更新的数据，例如价格（历史的和现在的都需要保存好，就需要单独的字段来保存）。
设计表的时候都要确定好，防止在以后更新的时候出现问题。


10.13
dubbo减少了开发成本，基于现有系统进行对外开放接口，只需要提供xml声明，而对于消费者来说与调用本地interface没有什么区别，而spring cloud来说就要麻烦些比如 restTemplate.getForEntity("http://cloud-simple-service/",String.class).getBody(); 。你也说了dubbo效率高些，这才是最重要的，至于可维护性嘛，我相信只要使用过dubbo的人都知道

 由于Spring Cloud与Dubbo天生使用的协议层面不一样，前者是HTTP，后者是TCP(使用的是Netty NIO框架，序列化使用的阿里定制版Hessian2)，导致两个框架的性能差距略大。基本上是三比一的差距！Dubbo官方TPS是1W左右，这和我们的测试最高值是接近的。在之前我们还进行过一次测试，那次测试是真实的项目测试，包含了对数据库的访问，最后二者的结果相差并不是很大。由此也得出，框架的性能可能对一个真实的请求(Request)影响并不是很大，或者说并不起决定性作用，也许真正影响性能的是你的业务代码，比如数据库访问以及IO，当然了，框架的性能在一些对性能要求敏感的应用来说也是要考虑的。

 
 dubbo：Dubbo缺省协议采用单一长连接和NIO异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况
 
 性能比较
 使用一个Pojo对象包含10个属性，请求10万次，Dubbo和Spring Cloud在不同的线程数量下，每次请求耗时（ms）如下： 
点评：dubbo支持各种通信协议，而且消费方和服务方使用长链接方式交互，通信速度上略胜Spring Cloud，如果对于系统的响应时间有严格要求，长链接更合适。


三、服务依赖方式
Dubbo：服务提供方与消费方通过接口的方式依赖，服务调用设计如下：
interface层：服务接口层，定义了服务对外提供的所有接口
Molel层：服务的DTO对象层，
business层：业务实现层，实现interface接口并且和DB交互

因此需要为每个微服务定义了各自的interface接口，并通过持续集成发布到私有仓库中，调用方应用对微服务提供的抽象接口存在强依赖关系，开发、测试、集成环境都需要严格的管理版本依赖。



通过maven的install & deploy命令把interface和Model层发布到仓库中，服务调用方只需要依赖interface和model层即可。在开发调试阶段只发布Snapshot版本。等到服务调试完成再发布Release版本，通过版本号来区分每次迭代的版本。通过xml配置方式即可方面接入dubbo，对程序无入侵。 
 
 
  queryParam.setDel(DelEnum.VALID.getType());
  
  if (insertId <= 0) {
                return ResponseUtil.error(ErrorCode.FAIL_SAVE);
            }
			
10.17
1.java 类型转换
2.BigDecim
3.springtest  java.lang.IllegalStateException: Could not load TestContextBootstrapper [null]. Specify 版本号不一致？
4.mariaDB中的DATE_FORMAT()  mysql没问题 mariadb报错、 注解中写的sql换行时不加空格，上一行和下一行会连起来。例如from user a join product
on a.id = b.id   ，join后面的表就拼接成producton  没有问题，主要是sql语法有问题
5.mysql json
6.看需求，找对应案例
7.阿里云对象存储
OSS对象存储用处电商、门户及企业网站图片、视频存储将网站中的图片、音视频等文件上传至对象存储，通过URL方式即可访问，OSS多种数据预处理服务，实现多媒体文件的 一站式预处理数据库、快照等数据备份上云冷热数据分层，将您本地或者云上数据库、ECS快照数据等存储在对象存储OSS中，高效便捷，进一步降低存储成本
阿里云对象存储 OSS（Object Storage Service）为您提供基于网络的数据存取服务。您可以通过网络使用 OSS 随时存储和调用包括文本、图片、音频、和视频等在内的非结构化数据文件。您可以使用阿里云开发工具包或通过直接在应用程序中进行 RESTful API 调用执行基本和高级 OSS 任务，也可以直接使用阿里云 OSS 管理控制台执行部分任务而无需编写任何代码。安全稳定，数据可靠     安全稳定加密用户身份验证，提供签名权限控制与防盗链功能。强大的安全防护系统，抵御洪水攻击，保障合法请求通过。提供访问日志记录，及时掌握流量动向；     数据可靠分布式存储，保障存储数据安全，存储数据三重备份可靠性99.99999999%；与阿里巴巴、淘宝彼邻，服务可用性99.9%海量存储、弹性计费    海量存储文件存储数量无上限；根据上传数据方式不同而不同,Put Object方式最大不能超过5GB, 使用multipart上传方式object大小不能超过48.8TB基于云计算平台动态扩展，存储容量与流量按实际用量自由伸缩，无需手动扩容；     弹性计费用多少付多少，不用提前为峰值买单；阶梯式计费模式，越用越省钱；3.简单易用、性能卓越    简单易用不断更新的API、与丰富的SDK开发包，开发者快速上手；提供易用的用户Web控制台文件管理界面，与更多第三方工具、插件，满足各种应用需求；    性能卓越大规模数据处理，文件读写、I/O性能更强；BGP多线（中国电信、联通、移动、教育网等）骨干网络接入，南北互联互通，全国各地流畅访问；金牌服务，保驾护航    故障百倍赔偿如果由于阿里云原因导致您的OSS无法正常使用，我们承诺按照故障时间的 100 倍进行赔偿。    7×24 小时技术支持阿里云专业的售后工程师团队，为您免费提供7×24 小时不间断的技术支持服务。 


nio
  
  
productId 8d9d20bad06611e895430862664c73a4
supplierId b8bee0fecb6b11e8a38a000c29456156

10.18
注意基本类型的所占字节B，表示的是内存大小
根据是数据大小好精度选择对应的类型。
varchar(n)，n表示什么？
MySQL5.0.3之前varchar(n)这里的n表示字节数
MySQL5.0.3之后varchar(n)这里的n表示字符数，比如varchar（200），不管是英文还是中文都可以存放200个
n最大可以是多少
MySQL行长度
MySQL要求一个行定义长度不能超过65535个字节，不包括text、blob等大字段类型，varchar长度受此长度限制，和其他非大字段加起来不能超过65535个字节.

超过以上限制则会报错：

varchar(n)占用几个字节
varchar(n)占用几个字节跟字符集有关系：
字符类型若为gbk，每个字符占用2个字节
字符类型若为utf8，每个字符最多占用3个字节

varchar最大长度可以是多少
根据字符集，字符类型若为gbk，每个字符占用2个字节，最大长度不能超过32766，字符类型若为utf8，每个字符最多占用3个字节，最大长度不能超过21845，若超过这个限制，则会自动将varchar类型转为mediumtext或longtext。

在MySQL中，我们用varchar（20），代表的varchar类型，
20个字符，里面的数字20的单位是字符，用大白话来说意思就 
varchar2(20)
这是在Oracle中的varchar2类型，里面的数字20代表的却是字节数；



oss  类似于网盘，但是你可以拿到文件直链。  可以作为网站、app等web应用的： 附件服务器、头像服务器、图片服务器、下载服务器  
cdn  内容分发，相当于网络传输的高速路。解决机房节点不好访问速度慢的问题。

 


/***
 * Created by CaoXingYun Wang on 2018/10/18.
 */
 
 启动报错（Cannot determine embedded database driver class for database type NONE）
 1.springboot启动时会根据引入的pom检查，是否需要自动创建数据源，如果需要数据源，但是配置文件中却没有配置，则会报错。
 2.注意没有引入任何jar时，springboot启动时会自动注入数据源和配置jpa，
 启动类中加入注解：@SpringBootApplication(exclude={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class})
 
 遇到这类问题，先找引入的jar有没有需要的数据源的，有则干掉。
 最后再在注解中排出掉最自动注入的

 
10.19
1.nio
2.springtest  java.lang.IllegalStateException: Could not load TestContextBootstrapper [null]. Specify 版本号不一致？
3.mysql json OK 
4.看需求，找对应案例


10.22
1.Java中throw和throws的区别
throw关键字：语句抛出异常   throws关键字：声明异常（方法抛出一个异常）
    01.throw   是语句抛出一个异常。
语法：throw (异常对象);
         throw e;
    02. throws  是方法可能抛出异常的声明。(用在声明方法时，表示该方法可能要抛出异常)   调用者必须做出处理（捕获或继续抛出）
语法：[(修饰符)](返回值类型)(方法名)([参数列表])[throws(异常类)]{......}
            public void doA(int a) throws Exception1,Exception3{......}
			
    03.throws可以单独使用，但throw不能， throw要么和try-catch-finally语句配套使用，要么与throws配套使用。但throws可以单独使用，然后再由处理异常的方法捕获。

    04.throw语句用在方法体内,表示抛出异常,由方法体内的语句处理 
         throws语句用在方法声明后面,表示再抛出异常,由调用这个方法的上一级方法中的语句来处理，必须做出处理(捕获或继续声明)

    05.throws主要是声明这个方法会抛出这种类型的异常，使其他地方调用它时知道要捕获这个异常，使得提醒必须做出处理。否则编译是不会通过的。
         throw是具体向外抛异常的动作，所以它是抛出一个异常实例。
		 
总结	 
1、throws出现在方法函数头；而throw出现在函数体。
2、throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。
3、两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。

2.自定义异常
用户可以自定义异常，新建一个异常类，让其继承Exception类或Exception的某个子类。然后用throw抛出自己定义的异常类对象

3.springboot 统一异常处理
经过测试发现@AdviceController可以捕获到Controller层抛出的异常(方法throws往上抛出的异常和throw e 抛出实例都能捕获)，

在实际测试中还发现，如果在Controller中不做异常catch处理，在service中抛出异常，那么也是可以在这里捕获到异常的。


4.springboot中定义全局异常处理
@AdviceController 捕获异常
@ExceptionHandler 统一处理异常，返回给前台对应的错误信息。

如果直接在controller中 throws exception 在增强器中也是可以捕获到的。
throws 系统异常 是需要在上一层处理的。如果throws 自定义异常，可以不在上层处理，直接抛出，编译能通过。

 
异常处理总结
throws 系统异常，和throw e 一起使用，这是将异常往上层抛出。需要在上层捕获异常处理(try catch)，可以捕获异常自己处理，也可以重新抛出自定义异常如(throw Myexception),或者接着往上层抛出。 然后定义全局的异常处理，处理异常，返回给前端错误的信息，后端也能打印出对应的堆栈信信息。
往上层抛出异常
 public static double div(double value1, double value2, int scale) throws IllegalAccessException {
        if (scale < 0) {
            //如果精确范围小于0，抛出异常信息。
            throw new IllegalArgumentException("精确度不能小于0");
        } else if (value2 == 0) {
            //如果除数为0，抛出异常信息。
            throw new IllegalArgumentException("除数不能为0");
        }
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }

捕获处理
if(purchaseDetailVO.getAverageSale() != null){
            Double inUseStock = null;
            try {
                inUseStock = BigDemicalUtil.div(BigDemicalUtil.add(purchaseDetailVO.getInStock(),purchaseDetailVO.getOutStock()),purchaseDetailVO.getAverageSale(),2);
            } catch (IllegalAccessException e) {
			//1.直接自己处理，不抛出异常信息,例如打印信息
			//system.out.println('123456')
            //2.捕获后再抛出自定义异常
				throw new BusinessRunTimeException(PurchaseErrorCode.ERROR_CALCULATE);
            }
            purchaseDetailVO.setInUseStock(inUseStock);
        }

//异常处理器处理异常信息，返回给前台对应的错误码和信息，而不是服务异常，一堆堆栈信息。
 @ExceptionHandler
    @ResponseBody
    public ResponseVO exceptionHandler(HttpServletRequest request, Exception ex) {
        if (ex instanceof BusinessRunTimeException) {
            logger.info("捕获业务异常,method: " + request.getRequestURI(), ex);
            if (((BusinessRunTimeException) ex).getErrorCode() != null) {
                BusinessRunTimeException srte = (BusinessRunTimeException) ex;
                return ResponseUtil.error(srte.getErrorCode());
            } else if (((BusinessRunTimeException) ex).getCode() != null) {
                BusinessRunTimeException srte = (BusinessRunTimeException) ex;
                return ResponseUtil.error(srte.getCode(), srte.getMessage());
            }
            return ResponseUtil.error(ex.getMessage());
        } else if (ex instanceof MethodArgumentNotValidException) {
            String defaultMessage = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldError().getDefaultMessage();
            if (StringUtils.isNotBlank(defaultMessage)) {
                return ResponseUtil.error(ErrorCode.WRONG_PARAM.getCode(), defaultMessage);
            }
            return ResponseUtil.error(ErrorCode.WRONG_PARAM);
        } else if (ex instanceof HystrixRuntimeException) {
            this.logger.error("feign调用异常：", ex);
            return ResponseUtil.error(ErrorCode.WRONG_ONSERVER);
        } else {
            logger.error("捕获异常,method: " + request.getRequestURI(), ex);
        }
        return ResponseUtil.error(ErrorCode.WRONG_ONSERVER);
    }
	
 throws 自定义异常，上层不捕获或者接着往上抛出，都不会报编译错误。
 //往上抛出
  public static double div(double value1, double value2, int scale) throws myException {
        if (scale < 0) {
            //如果精确范围小于0，抛出异常信息。
            throw new myException("精确度不能小于0");
        } else if (value2 == 0) {
            //如果除数为0，抛出异常信息。
            throw new myException("除数不能为0");
        }
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }
 
controller再往上层抛出
TestController
{
	public test(){
		div(1,0);
	}
}
异常处理器依然会捕获。
	

2.需求，开发

10.23
1.Springboot 启动时 Field XXX in XXXX required a bean of type XXXX that could not be found.
不能加载bean，但是引用的bean存在。

基本上都是包结构的问题。项目启动时，只有@SpringBootApplication 所在的包被被扫描
所以其他包要和启动类同级。
检查包的结构问题，还有包的名称问题。包的名称要和pom文件中定义的对应。

2.Spring Could Zuul 就是做到请求转发，请求具体的服务实例，不直接访问实例，而是通过访问路由，在路由中建立映射规则，将请求转发都对应的实例中。
在路由中可以做一些校验工作，通过将路由注册到服务中心，可以获得服务的名称，路由规则直接映射对应的服务名即可。

通过路由请求product-service的getAllProductHasCode

http://192.168.1.132:1003/product-service/product/product/getAllProductHasCode?inUse=true
相当于localhost:7001/product/product/getAllProductHasCode?inUse=true

3.springconfig

config service 配置git仓库

4.springcloud消息总线

5.数据权限过滤

6.lambda表达式

 @ApiModelProperty(value = "商品id")
    private String id;
	
	
	this.startRow = this.pageNum > 0 ? (this.pageNum - 1) * this.pageSize : 0;
        this.endRow = this.startRow + this.pageSize * (this.pageNum > 0 ? 1 : 0);
		

		
10.24
pagehelper 分页原理
总结：PageHelper首先将前端传递的参数保存到page这个对象中，接着将page的副本存放入ThreadLoacl中，这样可以保证分页的时候，参数互不影响，接着利用了mybatis提供的拦截器，取得ThreadLocal的值，重新拼装分页SQL，完成分页。
利用查询返回的List 已经包含了分页信息。

注：返回结果list，已经是Page对象，Page对象是一个ArrayList。
原理：使用ThreadLocal来传递和保存Page对象，每次查询，都需要单独设置PageHelper.startPage()方法。
//获取第1页，10条内容，默认查询总数count
    PageHelper.startPage(1, 10);
//紧跟着的第一个select方法会被分页
    List<Country> list = studentMapper.find();
	Page page = ((Page) list;

	count查询，其实是PageHelper帮助我们生成的一个MappedStatement内存对象，它可以免去我们在XXXMapper.xml内单独声明一个sql count查询，我们只需要写一个sql分页业务查询即可。
返回的List最后自己做一层封装，将分页信息组装起来，如果直接返回List可能丢失信息。
	
PageHelper使用建议（性能最好）：
1、明确指定dialect。2、明确编写sql分页业务和与它对应的count查询，别图省事。

内存分页
list.subList(0,5)
左开右闭

1.Spring Could Zuul 就是做到请求转发，请求具体的服务实例，不直接访问实例，而是通过访问路由，在路由中建立映射规则，将请求转发都对应的实例中。
在路由中可以做一些校验工作，通过将路由注册到服务中心，可以获得服务的名称，路由规则直接映射对应的服务名即可。

通过路由请求product-service的getAllProductHasCode

http://192.168.1.132:1003/product-service/product/product/getAllProductHasCode?inUse=true
相当于localhost:7001/product/product/getAllProductHasCode?inUse=true

2.eureka

3.spring config 
创建一个 config-service 的服务端，配置文件中指定仓库的git 地址，HTTP连接需要账户密码，ssh需要秘钥
引用spring-cloud-config-server 依赖。启动类中加入EnableConfigServer.

其他服务要使用仓库配置需要引入spring-cloud-starter-config，然后使用bootstrap.yml 配置文件
配置 spring:
  cloud:
    config:
      uri: ${spring.profiles.url} //config-service 的ip
      name: ${spring.application.name}// 配置文件的服务名
      profile: ${spring.profiles.active}//配置文件的生效文件

基于服务化配置
客户端不通过 ip 访问服务端，而是利用服务服务注册中心，直接访问config service 的服务名，再根据配置获取 对应的配置文件。
config service  启动类加注解 @EnableDiscoveryClient 要指定服务注册中心，将自己注册起来。
 
config client 启动类加注解 @EnableDiscoveryClient 也要指定注册中心，能够发现服务。
配置文件中配置
spring.cloud.config.discovery.enabled = true;
开启通过服务访问config-service
spring.cloud.config.discovery.serviceId = config-service 指定服务名

spring.cloud.config.failFase = true;
客户端开启该配置，当配置在中心出错的时候，可以快速获取错误返回，配置预加载一堆不需要的信息。

refresh 动态刷新配置 需要在客户端添加actuator jar 包，暴露refresh端口。修改配置中心的配置文件后，访问一下refresh接口即可刷新，
注意要刷新的是客户端，即哪个客户端获取配置信息，刷新那个客户端。

4.spring cloud bus 消息总线 

1）springboot 整合 rabbitmq
引入spring-boot-starter-amqp

2)spring cloud bus 实现动态刷新config的配置文件
整合rabbitmq
1)安装rabbitmq
2)所用 客户端 引入spring-cloud-starter-bus-amqp,spring-cloud-starter-actuator
所用 客户端
3)客户端的配置文件中加入rabbitmq的登陆连接信息。

springcould 自动配置实现了自动属性。

当修改配置文件后，一个实例会自动触发refresh刷新配置，然后将消息推送到消息总线上。
其他服务实例连接在消息总线上，会获得刷新消息，获取更新配置。

优化
config-service 中同样配置amqp , 配置连接信息。当修改时由配置中心来刷新，其他实例获取更新。

5.spring cloud 与 Zipkin整合
主要用来分析和追踪一次请求的整体过程，各个服务之间调用的时间，执行路径等情况，提供一个UI来查看相关信息。
跟踪HTTP请求
1)引入依赖
        <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-autoconfigure-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-server</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-autoconfigure-collector-rabbitmq</artifactId>
            <version>2.6.1</version>
        </dependency>
		
2)启动类加入@EnableZipkinServer

3)配置端口 8080
访问管理界面 http://localhost:8080/

4)为客户端配置Zipkin的信息
引入spring-cloud-sleuth-zipkin

并配置spring.zipkin.base-url=http://localhost:8080/

跟踪消息路径
引入spring-cloud-sleuth-stream

10.25
1.rabbitmq
使用场景
在项目中，将一些无需即时返回且耗时的操作提取出来，进行了异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量。
之前看了kafka，再看RabbitMQ，感觉是各有千秋的。前者支持海量高并发，后者主要是安全。所以日志什么的可以用kafka，但是一些重要的、敏感的数据RabbitMQ首选。

异步处理
应用解耦
流量削峰

注册用户时候，发送激活邮件。
监控应用中抛出的异常，邮件通知管理员。也就是增加监控功能，且一个消息服务可以监控无数个应用。
异构型架构系统间的各服务通信，因为消息服务于平台或者语言无关，典型的应用在 SOA 分布式体系的各个服务之间，可以做到，我依赖你，但是我可以不在乎你是否在运行，的关系。
例如，微信的抢红包，淘宝的订单，铁道部的购票等，如果不丢给队列排队处理，突然性的高并发会有让应用或者数据库瘫痪的风险。

2.rabbitmq exchange 根据路由匹配消息队列


/**
     * 构造方法注入
     */
    @Autowired
    public Send(RabbitTemplate rabbitTemplate) {
        this.rabbitTemplate = rabbitTemplate;
    }

	
10.26
线程

1.发布失败 mvn配置文件修改 idea mvn启动配置
org.apache.maven.plugin.MojoExecutionException: Failed to deploy artifacts: Could not transfer artifact com.ecmoho:ecmoho-purchase-facade:jar:1.0.0 from/to Release (http://192.168.1.144:8081/repository/maven-releases/): Failed to transfer file: http://192.168.1.144:8081/repository/maven-releases/com/ecmoho/ecmoho-purchase-facade/1.0.0/ecmoho-purchase-facade-1.0.0.jar. Return code is: 401, ReasonPhrase: Unauthorized.

2.Jenkins 自动构建
原理
部署前将代码提交，依赖项目发布到私服

Jenkins会在自己的工作目录上从Git仓库下载代码，启动时从私服下载jar包，然后自己构建
没有问题后，将代码copy到服务器
然后运行脚本发布即可。

  "createUser": "string",
  
  10.29
  1、多线程
  SpringMVC是单例的，高并发情况下，如何保证性能的？
  Java里有个API叫做ThreadLocal，spring单例模式下用它来切换不同线程之间的参数。用ThreadLocal是为了保证线程安全，实际上ThreadLoacal的key就是当前线程的Thread实例。单例模式下，spring把每个线程可能存在线程安全问题的参数值放进了ThreadLocal。这样虽然是一个实例在操作，但是不同线程下的数据互相之间都是隔离的，因为运行时创建和销毁的bean大大减少了，所以大多数场景下这种方式对内存资源的消耗较少，而且并发越高优势越明显。
  
  
  ThreadLocal把当前线程作为key，来维护管理一个可变的对象，在某一个方法里面set值，在后面的某个方法调用里面get值
  
  
  http请求，到业务处理，再到响应的过程，是在一个线程里面的。 
对tomcat来说，每一个进来的请求(request)都需要一个线程，直到该请求结束。tomcat会维护一个线程池，每一个http请求，会从线程池中取出一个空闲线程。默认初始化75个线程，可以进行修改。

计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。
假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。
进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。
一个车间里，可以有很多工人。他们协同完成一个任务。
线程就好比车间里的工人。一个进程可以包括多个线程。
车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。
可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。
一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。
还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。
这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（Semaphore），用来保证多个线程不会互相冲突。 
不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。

操作系统的设计，因此可以归结为三点： 
（1）以多进程形式，允许多个任务同时运行； 
（2）以多线程形式，允许单个任务分成不同的部分运行； 
（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。

2.赚钱需要idea，发现商机。看各行各业人们的需求
1).培训班，vfp培训，sql简单5000一位，买证800，技术含量很低，考虑市场需求，人数，可以做一做
，或者录视频，写软件都可以。
2)营销，推广


3)多线程

如果做 java web 方面开发的话几乎用不到多线程！因为有多线程的地方 servlet 容器或者其他开发框架都已经实现掉了！

一般在网络应用程序中使用多线程的地方非常多！

另外，你说的拷贝文件使用多线程，那是没有用的！以多线程来提高效率的场景一般在 CPU 计算型，而不是在 IO 读写型。CPU 可以会有多个核心并行处理计算，但是磁盘 IO 就没这功能了，磁头只有一个，根本不可能靠多线程提高效率！

一般来说，磁盘 IO 的并发能力为 0，也就是说无法支持并发！网络 IO 的话由于带宽的限制的，使用多线程处理最多也只能达到带宽的极值。

对于磁盘 IO 来说，多线程可以用于一个线程专门用于读写文件，其他的线程用于对读取数据进行处理，这样才有可能更好地利用 CPU 资源。

如果仅仅是单纯的文件复制，使用多线程操作的话，会使用磁头在磁盘上不停地进行寻道操作，使得效率更为低下！


volatile变量–多线程间可见
由于每个线程都有自己的工作内存区，因此当一个线程改变自己的工作内存中的数据时，对其他线程来说，可能是不可见的。为此，可以使用volatile关键字使所有线程军读内存中的变量，从而使得volatile变量在多线程间可见。
声明为volatile的变量可以做到如下保证：
1、其他线程对变量的修改，可以及时反应在当前线程中；2、确保当前线程对volatile变量的修改，能及时写回到共享内存中，并被其他线程所见；3、使用volatile声明的变量，编译器会保证其有序性。
Reentrantlock称为重入锁。它比synchronized拥有更加强大的功能，它可以中断、可定时。在高并发的情况下，它比synchronized有明显的性能优势。
Reentrantlock提供了公平和非公平两种锁。公平锁是对锁的获取是先进先出，而非公平锁是可以插队的。当然从性能上分析，非公平锁的性能要好得多。因此，在无特殊需要，应该优选非公平锁，但是synchronized提供锁业不是绝对公平的。Reentrantlock在构造的时候可以指定锁是否公平。
在使用重入锁时，一定要在程序最后释放锁。一般释放锁的代码要写在finally里。否则，如果程序出现异常，Loack就永远无法释放了。synchronized的锁是JVM最后自动释放的。
ReadWriteLock读写锁

读写分离是一种非常常见的数据处理思想。在sql中应该算是必须用到的技术。ReadWriteLock是在JDK5中提供的读写分离锁。读写分离锁可以有效地帮助减少锁竞争，以提升系统性能。读写分离使用场景主要是如果在系统中，读操作次数远远大于写操作。

Condition对象

Conditiond对象用于协调多线程间的复杂协作。主要与锁相关联。通过Lock接口中的newCondition()方法可以生成一个与Lock绑定的Condition实例。Condition对象和锁的关系就如用Object.wait()、Object.notify()两个函数以及synchronized关键字一样。

ThreadLocal线程局部变量

在刚开始接触ThreadLocal，笔者很难理解这个线程局部变量的使用场景。当现在回过头去看，ThreadLocal是一种多线程间并发访问变量的解决方案。与synchronized等加锁的方式不同，ThreadLocal完全不提供锁，而使用了以空间换时间的手段，为每个线程提供变量的独立副本，以保障线程安全，因此它不是一种数据共享的解决方案。

ThreadLocal是解决线程安全问题一个很好的思路，ThreadLocal类中有一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值对应线程的变量副本，由于Key值不可重复，每一个“线程对象”对应线程的“变量副本”，而到达了线程安全。
特别值得注意的地方，从性能上说，ThreadLocal并不具有绝对的又是，在并发量不是很高时，也行加锁的性能会更好。但作为一套与锁完全无关的线程安全解决方案，在高并发量或者所竞争激烈的场合，使用ThreadLocal可以在一定程度上减少锁竞争。

10.30
Java NIO和IO的主要区别
IO                NIO
面向流            面向缓冲
阻塞IO            非阻塞IO
无                选择器
面向流与面向缓冲
Java NIO和IO之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。 Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。

阻塞与非阻塞IO
Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。

选择器（Selectors）
Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。

1.tomcat NIO配置
将Service.xml文件下的内容

<Connector port="8080" protocol="HTTP/1.1"  

connectionTimeout="20000"  

redirectPort="8443" /> 

改为

<Connector port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol"  

connectionTimeout="20000"  

redirectPort="8443" />

那么在启动tomcat时可以查看到tomcat已经以nio方式启动
同时为了获得更好的并发性还可以配置线程池

<Connector executor="tomcatThreadPool"

               port="8080" protocol="HTTP/1.1"

               connectionTimeout="20000"

               redirectPort="8443" />

<Connector port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol"

               maxThreads="150" SSLEnabled="true" scheme="https" secure="true"

               clientAuth="false" sslProtocol="TLS" />
			   
2.Tomcat Connector(Tomcat连接器)有bio、nio、apr三种运行模式
bio

bio（blocking I/O，阻塞式I/O操作），表示Tomcat使用的是传统的Java I/O操作(即java.io包及其子包)。 

默认的模式，性能最差，没有经过任何优化处理和支持。

nio

nio(non-blocking I/O)，Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API。拥有比传统I/O操作(bio)更好的并发运行性能。 

apr

apr(Apache Portable Runtime/Apache可移植运行时库)，Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高Tomcat对静态文件的处理性能。从操作系统级别来解决异步的IO问题,大幅度的提高性能。 Tomcat apr也是在Tomcat上运行高并发应用的首选模式。


在linux系统启动springboot项目

nohup java -jar XXX.jar
nohup 不挂断运行的命令，当终端关闭或CTRL+C的时候，程序依旧运行

springboot的三种启动方式
一：IDE 运行Application这个类的main方法

二：在springboot的应用的根目录下运行mvn spring-boot:run
mvn spring-boot:run


三：使用mvn install 生成jar后运行
先到项目根目录
mvn install
cd target
java -jar   xxxx.jar

区别:前台启动ctrl+c就会关闭程序,后台启动ctrl+c不会关闭程序

前台启动
java -jar XXX.jar
 

指定启动内存大小

java -Xms1024m -Xmx1024m -Xmn1024m -server -jar boot.jar

 

后台启动
java -jar xxx.jar &
 

区别:前台启动ctrl+c就会关闭程序,后台启动ctrl+c不会关闭程序

制定控制台的标准输出
java -jar xxx.jar > catalina.out  2>&1 & 
 

catalina.out将标准输出指向制定文件catalina.out
2>&1 输出所有的日志文件
& 后台启动

10.31
查询没有排序
node.js 
安装node.js 
命令行 node -v 查看版本
npm -v 查看版本

npm install -g cnpm --registry=https://registry.npm.taobao.org
安装镜像

npm run dev 运行前端。

11.2
前后台交互太乱了
一个id和name在传的时候已经有了
在交互的过程中，反复的查值赋值

11.5
线程

11.6
 1.Unable to register Log4j shutdown hook because JVM is shutting down. Using SimpleLogger
 
 2.思考：
	1.一次查询有很多重复查询，为了获取一个值重复查询多次，id和name间的多次转化 所以要优化，如何优化？ 
 自己的代码考虑不周，导致后面的需求想公用一个模块和VO直接图简便，就没有考虑效率问题，有时间可以整体重构，代码要整洁，干净，高效率
	2.公用的VO之间的值很乱，前台传递的参数有多余的，后台不需要，这样的前台需要直接去掉，前台也需要优化。
 应该不共用，需要什么定义什么
	3.很多VO的值大体都一样，可不可公用呢，应该不同模块不同VO，有公共属性可以写父类封装。
    4.直接利用mapper中的sql.
 
 3.@NotEmpty,@NotNull和@NotBlank的区别
	1 @NotEmpty :不能为null，且Size>0
	2 @NotNull:不能为null，但可以为empty,没有Size的约束
    3 @NotBlank:只用于String,不能为null且trim()之后size>0
 
 4.post 请求需要加@RequestBody 注解，请求的为json
 
 11.7
 对接
 一.品牌
 1.添加品牌
 1).合作单位归属
 提示：品牌在U8中归属在所选单位的账套下。
 2).合同附件
抓取OA中合同审核流程中的附件，同时可以在线添加
 3).提交
提交后，发起OA审核流程； 
 OA审核通过后，更新中台品牌状态，并同步到用友U8对应的账套和wms。
同时按照选择的合作单位，将品牌归类在该财务账套下。
 4).停用
推送给U8和wms，更新品牌停用状态。
U8中停用时间为点击提交的时间。

二.商品
1.新增商品
1)品牌：取审核通过的且有效的品牌（未停用状态）；

2)OA审核通过后，商品推送给易恒云、U8系统和wms；自动添加一个商品；

未填写的项目，对接接口按照U8要求，做处理。
三.供应商
1.供应商管理 
 1)每次打开当前页面，更新OA审核状态；
 2)oa审核通过后，供应商信息同步给U8和wms系统；
对应字段待定。
 
2.增加供应商
提交时：
1）对接OA系统，创建oa申请单。

生成oa申请单；

11.08
线程
sleep()，wait()，yield()和join()方法的区别
Thread 执行sleep()后，进入阻塞状态，其它线程有机会执行，但sleep()方法不会释放锁标记。也就是说有synchronized同步块,其它线程仍不能访问共享数据。
synchronized同步代码块中使用sleep()，仍会导致不同步情况？

时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。

mysql 按照首字母排序
ORDER BY convert(t1.name using gbk) ASC

11.09
volatile 变量 保持了内存可见性
例如
volatile int a = 0；

当线程A在本地内存修改A后，会将修改后的信息刷到共享内存中。
当线程B读取a时，先将本地内存的数据改为无效，然后从主内存中读取。 

11.12
confused
at sea 
1.多线程并发
2.English
3.plan

接口对接

11.13
业务逻辑

首先用户提出采购申请，经过审批，采购申请单流转到采购部，采购部进行采购。采购完成后，供应商会将物品，送货单，发票送到采购部门，采购部门将采购物品和送货单交给仓库做收货处理并开出收货单。随后采购员将收货单，采购订单，采购申请单和发票进行匹配，如果一致，则将单据送给财务部要求付款。而财务部检查三单是否匹配，以及三单和采购申请单是否匹配。 

供应链是由供应商、制造商、仓库、配送中心和渠道商等构
供应链管理
供应链管理
成的物流网络。同一企业可能构成这个网络的不同组成节点，但更多的情况下是由不同的企业构成这个网络中的不同节点。比如，在某个供应链中，同一企业可能既在制造商、仓库节点，又在配送中心节点等占有位置。在分工愈细，专业要求愈高的供应链中，不同节点基本上由不同的企业组成。在供应链各成员单位间流动的原材料、在制品库存和产成品等就构成了供应链上的货物流。

“供应链”的定义为：“围绕核心企业，通过对信息流，物流，资金流的控制，从采购原材料开始，制成中间产品以及最终产品，最后由销售网络把产品送到消费者手中。它是将供应商,制造商，分销商，零售商,直到最终用户连成一个整体的功能网链模式。”所以，一条完整的供应链应包括供应商（原材料供应商或零配件供应商），制造商（加工厂或装配厂），分销商(代理商或批发商)，零售商（卖场、百货商店、超市、专卖店、便利店和杂货店）以及消费者。

11.14
1.不断空指针，如何优化？
2.学习1小时
3.秒杀系统，行级锁，数据加锁，共同访问。
4.早睡早起，早上坐过站了？

5.sql
alter table payment_additional add (create_time datetime DEFAULT current_timestamp() not null comment'创建时间');
alter  table payment_additional add (update_time timestamp DEFAULT current_timestamp() not null COMMENT'更新时间');
alter table payment_additional add (del tinyint(1) not null DEFAULT 0 comment'逻辑删除');

create table payment_detail(
id varchar(32) comment '付款明细id',
waybill_id VARCHAR(32) comment '运单id',
payment_money DECIMAL(18,2) comment '付款金额',
status varchar(5) comment '付款状态',
invoice_id varchar(32) comment '发票id',
invoice_url varchar(500) comment '发票附件',
remark varchar(500) comment '备注',
apply_user varchar(256) comment '提交人',
create_time datetime DEFAULT current_timestamp() not null comment '创建时间',
update_time timestamp DEFAULT current_timestamp() not null COMMENT '更新时间',
del tinyint(1) not null DEFAULT 0 comment'逻辑删除',
PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 comment '付款明细';

11.15
付款
前台新增，如果没有id，就不要传 id： "" ,这样在后台也会保存，导致插入null，主键不唯一。

11.16
单点登陆
https://www.cnblogs.com/ywlaker/p/6113927.html#!comments

步骤11详解:
service=http://system2.com（不需要额外信息），此时，就变成了浏览器与http://sso.com站点之间的会话，这个会话因为系统1登录的原因已经被标记为已登录，所以认证中心取一块令牌，根据service参数回跳，并附上令牌，回跳地址：http://system2.com?token=token

当在同一个浏览器中同时打开多个标签，发送同一个请求或不同的请求，仍是同一个session;
当不在同一个窗口中打开相同的浏览器时，发送请求，仍是同一个session;
当使用不同的浏览器时，发送请求，即使发送相同的请求，是不同的session;
当把当前某个浏览器的窗口全关闭，再打开，发起相同的请求时，就是本文所阐述的，是不同的session,但是它和session的生命周期是没有关系的.

系统1登录成功后建立的全局会话可不可以理解成会sso返回浏览器一个cooki

用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话，用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心，全局会话与局部会话有如下约束关系

局部会话存在，全局会话一定存在
全局会话存在，局部会话不一定存在
全局会话销毁，局部会话必须销毁

11.16
sso
single sign on
oauth2
线程

11.17
redis
rz -y
tar -zxvf redis-5.0.0.tar.gz
cd redis-5.0.0
make
cd src/
make install
vim redis.conf
ls
/usr/local/bin/redis-server
/usr/local/redis-5.0.0/redis-conf
netstat -tunple | grep 6379
vi redis-conf
redis-cli
https://www.cnblogs.com/zknublx/p/5885840.html

算法时间负责度
算法的时间复杂度反映了程序执行时间随输入规模增长而增长的量
一个算法是由控制结构（顺序、分支和循环3种）和原操作（指固有数据类型的操作）构成的，则算法时间取决于两者的综合效果。为了便于比较同一个问题的不同算法，通常的做法是，从算法中选取一种对于所研究的问题（或算法类型）来说是基本操作的原操作，以该基本操作的重复执行的次数作为算法的时间量度。

1、时间复杂度 
（1）时间频度 一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。
（2）时间复杂度 在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。

T (n) = Ο(f (n)) 表示存在一个常数C，使得在当n趋于正无穷时总有 T (n) ≤ C * f(n)。简单来说，就是T(n)在n趋于正无穷时最大也就跟f(n)差不多大。也就是说当n趋于正无穷时T (n)的上界是C * f(n)。其虽然对f(n)没有规定，但是一般都是取尽可能简单的函数

例如，O(2n2+n +1) = O (3n2+n+3) = O (7n2 + n) = O ( n2 ) ，一般都只用O(n2)表示就可以了。注意到大O符号里隐藏着一个常数C，所以f(n)里一般不加系数。如果把T(n)当做一棵树，那么O(f(n))所表达的就是树干，只关心其中的主干，其他的细枝末节全都抛弃不管。

算法中语句执行次数为一个常数，则时间复杂度为O(1),另外，在时间频度不相同时，时间复杂度有可能相同，如T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。 按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),...， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。

常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜…＜Ο(2n)＜Ο(n!)
对一个问题（或一类算法）只需选择一种基本操作来讨论算法的时间复杂度即可，有时也需要同时考虑几种基本操作，甚至可以对不同的操作赋予不同的权值，以反映执行不同操作所需的相对时间。

（3）求解算法的时间复杂度的具体步骤是：

　　⑴ 找出算法中的基本语句；

　　算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。

　　⑵ 计算基本语句的执行次数的数量级；

　　只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。

　　⑶ 用大Ο记号表示算法的时间性能。

　　将基本语句执行次数的数量级放入大Ο记号中。

　　如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加。

for (i=1; i<=n; i++)  
       x++;  
for (i=1; i<=n; i++)  
    　for (j=1; j<=n; j++)  
          x++;  
　　第一个for循环的时间复杂度为Ο(n)，第二个for循环的时间复杂度为Ο(n2)，则整个算法的时间复杂度为Ο(n+n2)=Ο(n2)。

Ο(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n2)和Ο(n3)称为多项式时间，而Ο(2n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。

（4）在计算算法时间复杂度时有以下几个简单的程序分析法则:

(1).对于一些简单的输入输出语句或赋值语句,近似认为需要O(1)时间

(2).对于顺序结构,需要依次执行一系列语句所用的时间可采用大O下"求和法则"

求和法则:是指若算法的2个部分时间复杂度分别为 T1(n)=O(f(n))和 T2(n)=O(g(n)),则 T1(n)+T2(n)=O(max(f(n), g(n)))

特别地,若T1(m)=O(f(m)), T2(n)=O(g(n)),则 T1(m)+T2(n)=O(f(m) + g(n))

(3).对于选择结构,如if语句,它的主要时间耗费是在执行then字句或else字句所用的时间,需注意的是检验条件也需要O(1)时间

(4).对于循环结构,循环语句的运行时间主要体现在多次迭代中执行循环体以及检验循环条件的时间耗费,一般可用大O下"乘法法则"

乘法法则: 是指若算法的2个部分时间复杂度分别为 T1(n)=O(f(n))和 T2(n)=O(g(n)),则 T1*T2=O(f(n)*g(n))

(5).对于复杂的算法,可以将它分成几个容易估算的部分,然后利用求和法则和乘法法则技术整个算法的时间复杂度

另外还有以下2个运算法则:(1) 若g(n)=O(f(n)),则O(f(n))+ O(g(n))= O(f(n))；(2) O(Cf(n)) = O(f(n)),其中C是一个正常数

类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。渐近空间复杂度也常常简称为空间复杂度。
空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。

个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地\"进行的，是节省存储的算法，如这一节介绍过的几个算法都是如此；有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如将在第九章介绍的快速排序和归并排序算法就属于这种情况。

如当一个算法的空间复杂度为一个常量，即不随被处理数据量n的大小而改变时，可表示为O(1)；当一个算法的空间复杂度与以2为底的n的对数成正比时，可表示为0(10g2n)；当一个算法的空I司复杂度与n成线性比例关系时，可表示为0(n).若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间；若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变


时间复杂度 -- 时间，效率
空间复杂度 -- 内存，性能

easypoi 千分位
entity.setType(doubletype...)
entity.setNumFormat("###,###,###.##");//设置默认double类型format















